<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Welcome!</title>
        <style>
            
            body{
                font-family: Arial, Helvetica, sans-serif;
                margin: 0;
                padding: 0;
                background-color: rgb(243, 242, 242);
            }

            @media screen and (min-width: 768px) {

                .root{
                    width: 50%;
                    margin-left: auto;
                    margin-right: auto;
                }
                

                .login-form-container, .register-form-container{
                    box-shadow: 4px -1px 5px 10px rgba(0,0,0,0.03);
                    -webkit-box-shadow: 4px -1px 5px 10px rgba(0,0,0,0.03);
                    -moz-box-shadow: 4px -1px 5px 10px rgba(0,0,0,0.03);
                    background-color: rgb(255, 255, 255);
                    width: 300px;
                    margin-left: auto;
                    margin-right: auto;
                    
                    margin-bottom: 5%;
                    padding: 1%;

                    
                    border: 1px solid rgb(224, 224, 224);
                    
                    border-radius: 5px;
                }

                .login-form-container{
                    margin-top: 5%;

                }


                
                .controller-container, .controller-container-btn-only{
                    padding: 1%;
                }

                .controller-container{
                    
                    margin-bottom: 2%;
                }
                .controller-container-btn-only{

                    width: 75%;
                    margin-left: auto;
                    margin-right: auto;
                    margin-bottom: 6%;
                }


                
                .register-form-container{
            

                }

                .btn-controller-submit-type{

                    background-color: rgba(9, 156, 34, 0.938);
                    border: 1px solid rgba(7, 146, 30, 0.938);
                    width: 100%;
                    padding: 1.5%;
                    border-radius: 3px;
                    color: aliceblue;
                    height: 2.5em;

                }
                
                .btn-controller-submit-type:hover{

                    background-color: rgba(7, 146, 30, 0.938);
                    border: 1px solid rgba(7, 146, 30, 0.938);
                }

                .txt-controller,.password-controller{
                    outline-color: rgb(82, 163, 255);
                    width: 95%;
                    padding: 1%;
                    font-size: 1.0em;  
                    border: 1px solid rgb(224, 224, 224);

                } 
                .txt-controller{
                    height: 1.5em;


                }
                .password-controller{
                    height: 1.5em;
    


                }
                
                .form-title{
                    text-align: center;
                }

                label{
                    font-weight: bold;
                    font-size: 0.9em;
                }
            }
        </style>
    </head>
    <body>
        
        <div>
            <% if (typeof username !=='undefined') {%>
                <div class="admin-panel-container">
                    <h2>Hello <%= username %> </h2>
                    <h2>You're on the Admin panel</h2>
                    <button id="close-session">Logout</button>
                </div>
            <% } %>
            
            <% if (typeof username ==='undefined') {%>
                <div class="root">
                    <div class="login-form-container">
                        <form id="login-form">
                            <h2 class="form-title">Login</h2>
                            <div class="controller-container">
                                <label for="login-username">Username<label><br>
                                <input class="txt-controller" type="text" id="login-username" name="username" required>   
                            </div>
                            <div class="controller-container">
                                <label for="login-username">Password</label>    <br>           
                                <input class="password-controller" type="password" id="login-password" name="password" required>
                            </div>
                            <div class="controller-container-btn-only">
                                <button class='btn-controller-submit-type' type="submit">Login</button>
                            </div> 
                        </form>
                    </div>

                    <div class="register-form-container">
                        <form id="register-form">
                            <h2 class="form-title">Register now!</h2>
                            <div class="controller-container">
                                <label for="register-username">Username<label><br>
                                <input class="txt-controller" type="text" id="register-username" name="username" required>  
                            </div>
                            <div class="controller-container">
                                <label for="register-password">Password</label> <br>
                                <input class="password-controller" type="password" id="register-password" name="password" required>  
                            </div>
                            <div class="controller-container">
                                <label for="register-confirm-password">Confirm password</label> <br>
                                <input class="password-controller" type="password" id="register-confirm-password" name="confirmPassword" required> 
                            </div>
                            <div class="controller-container-btn-only">
                                <button class='btn-controller-submit-type' type="submit">Register</button>
                            </div>
                        </form>
                    </div>
                </div>
                
            <% } %>
        </div>
    <script>

        const ApiEndpoints = {
            'login':"/api/v1/auth",
            'logout':"/api/v1/auth/logout",
            'register':"/api/v1/users/register",
        }
        const loginForm = document.getElementById('login-form');
        const registerForm = document.getElementById('register-form');
        const logoutButton = document.getElementById('close-session');

        /* Event listeners */
        if (loginForm) {
            loginForm.addEventListener('submit', async (e) => {
                e.preventDefault();

                const username = document.getElementById('login-username').value;
                const password = document.getElementById('login-password').value;

                await loginService({ username, password }); 

                // Lo ideal seria que cuando de un error, se recargue la pagina
              
            });
        }

        if (registerForm) {
            registerForm.addEventListener('submit', async (e) => {
                e.preventDefault();

                const username = document.getElementById('register-username').value;
                const password = document.getElementById('register-password').value;
                const confirmPassword = document.getElementById('register-confirm-password').value;

                if (password !== confirmPassword) {

                    alert("Password doesn't match");
                    
                }else{
                    // registerService will now throw an error on failure, which is caught here
                    const response = await registerService({ username, password });

                    if(response){
                        alert("Register succesfully, redirecting")
                        
                        await loginService({ username, password }); 
                    }
                }

                
            });
        }

        if (logoutButton) {
            logoutButton.addEventListener('click', async (e) => {
                e.preventDefault();

                // logoutService 
                await logoutService();

            });
        }


        /* Services */
        // All service functions now consistently throw errors on non-ok responses
        // and return nothing (or `true`) on success.

        async function loginService({ username, password }) {
            try {
                const response = await fetch(ApiEndpoints['login'], { 
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ username, password })
                });
                
                if(response.status === 400){
                    alert("Username or password incorrect! Try again") 
                    redirectToHomeView()
                }

                if(response.status === 200){
                    redirectToProtectedView()
                }
                

            } catch (error) {
                throw new Error('Server error. Try again'); // Throw a more general error for network issues
            }
        }

        async function logoutService() { // username, password are not needed for logout typically
            try {
                const response = await fetch(ApiEndpoints['logout'], { // Assuming /api/v1/auth/logout
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json' // Still good practice to send, though body is empty
                    }
                });

                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({ message: 'Error server. Try again' }));
                    throw new Error(errorData.message || 'Loggin error! Try again');
                }

                redirectToHomeView()

            } catch (error) {
                console.error('Logout error! Try again', error);
                throw new Error('Loggin error! Try again');
            }
        }

        async function registerService({ username, password }) {
            try {
                // !!! IMPORTANT: Verify this URL. If your register is handled by AuthRoutes,
                // it should likely be '/api/v1/auth/register' to match your app.js mounting.
                const response = await fetch(ApiEndpoints['register'], { 
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ username, password })
                });

                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({ message: 'Loggin error! Try again' }));
                    throw new Error(errorData.message || 'Fallo al registrar.');
                }

                return true;

            } catch (error) {
                console.error('Loggin error! Try again', error);
                throw new Error('Loggin error! Try again');
            }
        }

        /* Utility Functions */
        function redirectToProtectedView() {
            window.location.href = '/protected';
        }

        function redirectToHomeView() {
            window.location.href = '/';
        }
        
    </script>
    </body>
</html>

